{"version":3,"file":"Polygon-5c101e17.js","sources":["../../src/components/Polygon.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport MapContext from '../context/MapContext';\nimport PolygonProps from './PolygonProps';\nimport { Coordinate } from '../util/parameters';\n\nexport default function Polygon({\n  points,\n\n  visible = true,\n  enabled = true,\n  selected = false,\n\n  onSelect = undefined,\n  onDeselect = undefined,\n\n  lineDash = [],\n  lineDashOffset = 0,\n  lineJoin = 'round',\n  lineWidth = 1,\n\n  strokeColor = 'rgb(0, 122, 255)',\n  strokeOpacity = 1,\n  strokeStart = 0,\n  strokeEnd = 1,\n\n  fillColor = 'rgb(0, 122, 255)',\n  fillOpacity = 0.1,\n  fillRule = 'nonzero',\n}: PolygonProps) {\n  const [polygon, setPolygon] = useState<mapkit.PolygonOverlay | null>(null);\n  const map = useContext(MapContext);\n\n  useEffect(() => {\n    if (map === null) return undefined;\n\n    const overlay = new mapkit.PolygonOverlay([]);\n    map.addOverlay(overlay);\n    setPolygon(overlay);\n\n    return () => {\n      map.removeOverlay(overlay);\n    };\n  }, [map]);\n\n  // Points\n  useEffect(() => {\n    if (polygon === null) return;\n\n    // No points\n    if (!points || points.length === 0) {\n      polygon.points = [];\n      return;\n    }\n\n    const toMapKitCoordinates = (coordinates: Coordinate[]): mapkit.Coordinate[] => coordinates.map(\n      ({ latitude, longitude }) => new mapkit.Coordinate(latitude, longitude),\n    );\n\n    // @ts-ignore\n    polygon.points = Array.isArray(points[0])\n      ? (points as Coordinate[][]).map(toMapKitCoordinates)\n      : toMapKitCoordinates(points as Coordinate[]);\n  }, [polygon, points]);\n\n  // Simple properties\n  const properties = { visible, enabled, selected };\n  Object.entries(properties).forEach(([propertyName, prop]) => {\n    useEffect(() => {\n      if (!polygon) return;\n      // @ts-ignore\n      polygon[propertyName] = prop;\n    }, [polygon, prop]);\n  });\n\n  // Simple style properties\n  const styleProperties = {\n    lineDash,\n    lineDashOffset,\n    lineJoin,\n    lineWidth,\n\n    strokeColor,\n    strokeOpacity,\n    strokeStart,\n    strokeEnd,\n\n    fillColor,\n    fillOpacity,\n    fillRule,\n  };\n  Object.entries(styleProperties).forEach(([propertyName, prop]) => {\n    useEffect(() => {\n      if (!polygon) return;\n      // @ts-ignore\n      polygon.style[propertyName] = prop;\n    }, [polygon, prop]);\n  });\n\n  // Events\n  const events = [\n    { name: 'select', handler: onSelect },\n    { name: 'deselect', handler: onDeselect },\n  ] as const;\n  events.forEach(({ name, handler }) => {\n    useEffect(() => {\n      if (!polygon || !handler) return undefined;\n\n      const handlerWithoutParameters = () => handler();\n\n      polygon.addEventListener(name, handlerWithoutParameters);\n      return () => polygon.removeEventListener(name, handlerWithoutParameters);\n    }, [polygon, handler]);\n  });\n\n  return null;\n}\n"],"names":["Polygon","points","visible","enabled","selected","onSelect","onDeselect","lineDash","lineDashOffset","lineJoin","lineWidth","strokeColor","strokeOpacity","strokeStart","strokeEnd","fillColor","fillOpacity","fillRule","polygon","setPolygon","useState","map","useContext","MapContext","useEffect","overlay","toMapKitCoordinates","coordinates","latitude","longitude","propertyName","prop","name","handler","handlerWithoutParameters"],"mappings":"8EAKA,SAAAA,EAAA,CAAgC,OAAAC,EAC9B,QAAAC,EAAA,GAEU,QAAAC,EAAA,GACA,SAAAC,EAAA,GACC,SAAAC,EAAA,OAEA,WAAAC,EAAA,OACE,SAAAC,EAAA,CAAA,EAED,eAAAC,EAAA,EACK,SAAAC,EAAA,QACN,UAAAC,EAAA,EACC,YAAAC,EAAA,mBAEE,cAAAC,EAAA,EACE,YAAAC,EAAA,EACF,UAAAC,EAAA,EACF,UAAAC,EAAA,mBAEA,YAAAC,EAAA,GACE,SAAAC,EAAA,SAEhB,EAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,EACAC,EAAAC,aAAAC,CAAA,EAEAC,OAAAA,EAAAA,UAAA,IAAA,CACE,GAAAH,IAAA,KAAkB,OAElB,MAAAI,EAAA,IAAA,OAAA,eAAA,CAAA,CAAA,EACA,OAAAJ,EAAA,WAAAI,CAAA,EACAN,EAAAM,CAAA,EAEA,IAAA,CACEJ,EAAA,cAAAI,CAAA,CAAyB,CAC3B,EAAA,CAAAJ,CAAA,CAAA,EAIFG,EAAAA,UAAA,IAAA,CACE,GAAAN,IAAA,KAAsB,OAGtB,GAAA,CAAAjB,GAAAA,EAAA,SAAA,EAAA,CACEiB,EAAA,OAAA,GACA,MAAA,CAGF,MAAAQ,EAAAC,GAAAA,EAAA,IAA4F,CAAA,CAAA,SAAAC,EAAA,UAAAC,CAAA,IAAA,IAAA,OAAA,WAAAD,EAAAC,CAAA,CACpB,EAIxEX,EAAA,OAAA,MAAA,QAAAjB,EAAA,EAAA,EAAAA,EAAA,IAAAyB,CAAA,EAAAA,EAAAzB,CAAA,CAE8C,EAAA,CAAAiB,EAAAjB,CAAA,CAAA,EAKhD,OAAA,QADA,CAAA,QAAAC,EAAA,QAAAC,EAAA,SAAAC,CAAA,CACA,EAAA,QAAA,CAAA,CAAA0B,EAAAC,CAAA,IAAA,CACEP,EAAAA,UAAA,IAAA,CACEN,IAEAA,EAAAY,GAAAC,EAAwB,EAAA,CAAAb,EAAAa,CAAA,CAAA,CACR,CAAA,EAmBpB,OAAA,QAfA,CAAwB,SAAAxB,EACtB,eAAAC,EACA,SAAAC,EACA,UAAAC,EACA,YAAAC,EAEA,cAAAC,EACA,YAAAC,EACA,UAAAC,EACA,UAAAC,EAEA,YAAAC,EACA,SAAAC,CACA,CAEF,EAAA,QAAA,CAAA,CAAAa,EAAAC,CAAA,IAAA,CACEP,EAAAA,UAAA,IAAA,CACEN,IAEAA,EAAA,MAAAY,GAAAC,EAA8B,EAAA,CAAAb,EAAAa,CAAA,CAAA,CACd,CAAA,EAIpB,CAAe,CAAA,KAAA,SAAA,QAAA1B,CAAA,EACuB,CAAA,KAAA,WAAA,QAAAC,CAAA,CACI,EAE1C,QAAA,CAAA,CAAA,KAAA0B,EAAA,QAAAC,CAAA,IAAA,CACET,EAAAA,UAAA,IAAA,CACE,GAAA,CAAAN,GAAA,CAAAe,EAA0B,OAE1B,MAAAC,EAAA,IAAAD,IAEA,OAAAf,EAAA,iBAAAc,EAAAE,CAAA,EACA,IAAAhB,EAAA,oBAAAc,EAAAE,CAAA,CAAuE,EAAA,CAAAhB,EAAAe,CAAA,CAAA,CACpD,CAAA,EAGvB,IACF;;;;;;;;;;;;;;;"}